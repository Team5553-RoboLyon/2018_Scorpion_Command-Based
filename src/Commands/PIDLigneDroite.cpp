// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "PIDLigneDroite.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

PIDLigneDroite::PIDLigneDroite(double distanceConsigne): Command()
{
    m_distanceConsigne = distanceConsigne;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::baseRoulante.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	distanceParcourueDroite = 0;
	erreurDroite = 0;
	erreurPrecedenteDroite = 0;
	sommeErreursDroite = 0;
	differenceErreursDroite = 0;

	distanceParcourueGauche = 0;
	erreurGauche = 0;
	erreurPrecedenteGauche = 0;
	sommeErreursGauche = 0;
	differenceErreursGauche = 0;

	vitesseDroite = 0;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

void PIDLigneDroite::Initialize()
{
	Robot::baseRoulante->ResetPID();
	erreurPrecedenteDroite = 0;
	erreurPrecedenteGauche = 0;
	sommeErreursDroite = 0;
	sommeErreursGauche = 0;
}

void PIDLigneDroite::Execute()
{
	distanceParcourueDroite = -(Robot::baseRoulante->GetEncodeurDroit() * r * 2 * M_PI / 263);

	erreurDroite = m_distanceConsigne - distanceParcourueDroite;
	sommeErreursDroite += erreurDroite;
	differenceErreursDroite = erreurDroite - erreurPrecedenteDroite;

	vitesseDroite = kP * erreurDroite + kI * sommeErreursDroite + kD * differenceErreursDroite;

	Robot::baseRoulante->Drive(vitesseDroite, vitesseDroite);

	erreurPrecedenteDroite = erreurDroite;
}

bool PIDLigneDroite::IsFinished()
{
	return 	abs(erreurDroite) < tolerance;
}

void PIDLigneDroite::End()
{
	Robot::baseRoulante->Drive(0, 0);
}

void PIDLigneDroite::Interrupted()
{
	this->End();
}
