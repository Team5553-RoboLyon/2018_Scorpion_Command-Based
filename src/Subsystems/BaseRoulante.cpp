// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "BaseRoulante.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveWithJoystick.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

BaseRoulante::BaseRoulante() : frc::Subsystem("BaseRoulante") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    baseDroite2 = RobotMap::baseRoulanteBaseDroite2;
    baseDroite1 = RobotMap::baseRoulanteBaseDroite1;
    baseDroite = RobotMap::baseRoulanteBaseDroite;
    baseGauche1 = RobotMap::baseRoulanteBaseGauche1;
    baseGauche2 = RobotMap::baseRoulanteBaseGauche2;
    baseGauche = RobotMap::baseRoulanteBaseGauche;
    gyro = RobotMap::baseRoulanteGyro;
    encodeurDroit = RobotMap::baseRoulanteEncodeurDroit;
    encodeurGauche = RobotMap::baseRoulanteEncodeurGauche;
    ballshiffter = RobotMap::baseRoulanteBallshiffter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    vitesse1 = true;
}

void BaseRoulante::InitDefaultCommand()
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void BaseRoulante::Periodic()
{

}

void BaseRoulante::Drive(double gauche, double droite)
{
	baseGauche->Set(gauche);
	baseDroite->Set(droite);
}

void BaseRoulante::ActiverVitesse1()
{
	ballshiffter->Set(frc::DoubleSolenoid::Value::kReverse);
	vitesse1 = true;
}

void BaseRoulante::ActiverVitesse2()
{
	ballshiffter->Set(frc::DoubleSolenoid::Value::kForward);
	vitesse1 = false;
}

void BaseRoulante::ChangerVitesse()
{
	if(vitesse1 == true)
	{
		this->ActiverVitesse2();
	}
	else
	{
		this->ActiverVitesse1();
	}
}

int BaseRoulante::GetEncodeurDroit()
{
	return encodeurDroit->Get();
}

int BaseRoulante::GetGyro()
{
	return gyro->GetAngle();
}

void BaseRoulante::ResetPID()
{
	encodeurDroit->Reset();
	gyro->Reset();
}
